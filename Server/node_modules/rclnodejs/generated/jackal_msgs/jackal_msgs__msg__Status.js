// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const StatusRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  hardware_id: primitiveTypes.string,
  firmware_commit: primitiveTypes.string,
  mcu_uptime: DurationWrapper.refObjectType,
  connection_uptime: DurationWrapper.refObjectType,
  pcb_temperature: primitiveTypes.float32,
  mcu_temperature: primitiveTypes.float32,
});
const StatusRefArray = ArrayType(StatusRefStruct);
const StatusRefStructArray = StructType({
  data: StatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class StatusWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new StatusRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._hardware_idIntialized = true;
      this._wrapperFields.hardware_id =  new StringWrapper(other._wrapperFields.hardware_id);
      this._firmware_commitIntialized = true;
      this._wrapperFields.firmware_commit =  new StringWrapper(other._wrapperFields.firmware_commit);
      this._wrapperFields.mcu_uptime =  new DurationWrapper(other._wrapperFields.mcu_uptime);
      this._wrapperFields.connection_uptime =  new DurationWrapper(other._wrapperFields.connection_uptime);
      this._pcb_temperatureIntialized = true;
      this._mcu_temperatureIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new StatusRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._hardware_idIntialized = false;
    this._wrapperFields.hardware_id = new StringWrapper();
    this._firmware_commitIntialized = false;
    this._wrapperFields.firmware_commit = new StringWrapper();
    this._wrapperFields.mcu_uptime = new DurationWrapper();
    this._wrapperFields.connection_uptime = new DurationWrapper();
    this._pcb_temperatureIntialized = false;
    this._mcu_temperatureIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new StatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new StatusArrayWrapper;
  }
  static get ArrayType() {
    return StatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return StatusRefStructArray
  }
  static get refObjectType() {
    return StatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._hardware_idIntialized) {
        throw new TypeError('Invalid argument: hardware_id in Status');
      }
      if (!this._firmware_commitIntialized) {
        throw new TypeError('Invalid argument: firmware_commit in Status');
      }
      if (!this._pcb_temperatureIntialized) {
        throw new TypeError('Invalid argument: pcb_temperature in Status');
      }
      if (!this._mcu_temperatureIntialized) {
        throw new TypeError('Invalid argument: mcu_temperature in Status');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.hardware_id.freeze(own, checkConsistency);
    }
    this._refObject.hardware_id = this._wrapperFields.hardware_id.refObject;
    if (own) {
      this._wrapperFields.firmware_commit.freeze(own, checkConsistency);
    }
    this._refObject.firmware_commit = this._wrapperFields.firmware_commit.refObject;
    this._wrapperFields.mcu_uptime.freeze(own, checkConsistency);
    this._refObject.mcu_uptime = this._wrapperFields.mcu_uptime.refObject;
    this._wrapperFields.connection_uptime.freeze(own, checkConsistency);
    this._refObject.connection_uptime = this._wrapperFields.connection_uptime.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._hardware_idIntialized = true;
    this._wrapperFields.hardware_id.data = refObject.hardware_id.data;
    this._firmware_commitIntialized = true;
    this._wrapperFields.firmware_commit.data = refObject.firmware_commit.data;
    this._wrapperFields.mcu_uptime.copyRefObject(refObject.mcu_uptime);
    this._wrapperFields.connection_uptime.copyRefObject(refObject.connection_uptime);
    this._pcb_temperatureIntialized = true;
    this._refObject.pcb_temperature = refObject.pcb_temperature;
    this._mcu_temperatureIntialized = true;
    this._refObject.mcu_temperature = refObject.mcu_temperature;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.hardware_id);
    StringWrapper.freeStruct(refObject.firmware_commit);
    DurationWrapper.freeStruct(refObject.mcu_uptime);
    DurationWrapper.freeStruct(refObject.connection_uptime);
  }
  static destoryRawROS(msg) {
    StatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'jackal_msgs', subFolder: 'msg', interfaceName: 'Status'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get hardware_id() {
    if (!this._hardware_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.hardware_id.data;
  }
  set hardware_id(value) {
    this._hardware_idIntialized = true;
    this._wrapperFields.hardware_id.data = value;
  }
  get firmware_commit() {
    if (!this._firmware_commitIntialized) {
      return undefined;
    }
    return this._wrapperFields.firmware_commit.data;
  }
  set firmware_commit(value) {
    this._firmware_commitIntialized = true;
    this._wrapperFields.firmware_commit.data = value;
  }
  get mcu_uptime() {
    return this._wrapperFields.mcu_uptime;
  }
  set mcu_uptime(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.mcu_uptime.copy(value);
    } else {
      this._wrapperFields.mcu_uptime.copy(new DurationWrapper(value));
    }
  }
  get connection_uptime() {
    return this._wrapperFields.connection_uptime;
  }
  set connection_uptime(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.connection_uptime.copy(value);
    } else {
      this._wrapperFields.connection_uptime.copy(new DurationWrapper(value));
    }
  }
  get pcb_temperature() {
    if (!this._pcb_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.pcb_temperature;
  }
  set pcb_temperature(value) {
    this._pcb_temperatureIntialized = true;
    this._refObject.pcb_temperature = value;
  }
  get mcu_temperature() {
    if (!this._mcu_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.mcu_temperature;
  }
  set mcu_temperature(value) {
    this._mcu_temperatureIntialized = true;
    this._refObject.mcu_temperature = value;
  }
  copyRefObject(refObject) {
    this._refObject = new StatusRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._hardware_idIntialized = true;
    this._wrapperFields.hardware_id.copyRefObject(this._refObject.hardware_id);
    this._firmware_commitIntialized = true;
    this._wrapperFields.firmware_commit.copyRefObject(this._refObject.firmware_commit);
    this._wrapperFields.mcu_uptime.copyRefObject(this._refObject.mcu_uptime);
    this._wrapperFields.connection_uptime.copyRefObject(this._refObject.connection_uptime);
    this._pcb_temperatureIntialized = true;
    this._mcu_temperatureIntialized = true;
  }
  copy(other) {
    this._refObject = new StatusRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._hardware_idIntialized = true;
    this._wrapperFields.hardware_id.copy(other._wrapperFields.hardware_id);
    this._firmware_commitIntialized = true;
    this._wrapperFields.firmware_commit.copy(other._wrapperFields.firmware_commit);
    this._wrapperFields.mcu_uptime.copy(other._wrapperFields.mcu_uptime);
    this._wrapperFields.connection_uptime.copy(other._wrapperFields.connection_uptime);
    this._pcb_temperatureIntialized = true;
    this._mcu_temperatureIntialized = true;
  }
  static get classType() {
    return StatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"hardware_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"firmware_commit","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mcu_uptime","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"connection_uptime","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"pcb_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mcu_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"jackal_msgs","type":"Status","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Status"};
  }
  hasMember(name) {
    let memberNames = ["header","hardware_id","firmware_commit","mcu_uptime","connection_uptime","pcb_temperature","mcu_temperature"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class StatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof StatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new StatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to StatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to StatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new StatusRefArray(size);
    this._refObject = new StatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new StatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof StatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "StatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      StatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return StatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return StatusArrayWrapper;
  }
}
module.exports = StatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "hardware_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "firmware_commit",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mcu_uptime",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "connection_uptime",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "pcb_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mcu_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "jackal_msgs",
    "type": "Status",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Status"
}
*/
