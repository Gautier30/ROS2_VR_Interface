// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const DriveFeedbackRefStruct = StructType({
  current: primitiveTypes.float32,
  duty_cycle: primitiveTypes.float32,
  bridge_temperature: primitiveTypes.float32,
  motor_temperature: primitiveTypes.float32,
  measured_velocity: primitiveTypes.float32,
  measured_travel: primitiveTypes.float32,
  driver_fault: primitiveTypes.bool,
});
const DriveFeedbackRefArray = ArrayType(DriveFeedbackRefStruct);
const DriveFeedbackRefStructArray = StructType({
  data: DriveFeedbackRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DriveFeedbackWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DriveFeedbackRefStruct(other._refObject.toObject());
      this._currentIntialized = true;
      this._duty_cycleIntialized = true;
      this._bridge_temperatureIntialized = true;
      this._motor_temperatureIntialized = true;
      this._measured_velocityIntialized = true;
      this._measured_travelIntialized = true;
      this._driver_faultIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DriveFeedbackRefStruct();
    this._currentIntialized = false;
    this._duty_cycleIntialized = false;
    this._bridge_temperatureIntialized = false;
    this._motor_temperatureIntialized = false;
    this._measured_velocityIntialized = false;
    this._measured_travelIntialized = false;
    this._driver_faultIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new DriveFeedbackWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DriveFeedbackArrayWrapper;
  }
  static get ArrayType() {
    return DriveFeedbackArrayWrapper;
  }
  static get refObjectArrayType() {
    return DriveFeedbackRefStructArray
  }
  static get refObjectType() {
    return DriveFeedbackRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._currentIntialized) {
        throw new TypeError('Invalid argument: current in DriveFeedback');
      }
      if (!this._duty_cycleIntialized) {
        throw new TypeError('Invalid argument: duty_cycle in DriveFeedback');
      }
      if (!this._bridge_temperatureIntialized) {
        throw new TypeError('Invalid argument: bridge_temperature in DriveFeedback');
      }
      if (!this._motor_temperatureIntialized) {
        throw new TypeError('Invalid argument: motor_temperature in DriveFeedback');
      }
      if (!this._measured_velocityIntialized) {
        throw new TypeError('Invalid argument: measured_velocity in DriveFeedback');
      }
      if (!this._measured_travelIntialized) {
        throw new TypeError('Invalid argument: measured_travel in DriveFeedback');
      }
      if (!this._driver_faultIntialized) {
        throw new TypeError('Invalid argument: driver_fault in DriveFeedback');
      }
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._currentIntialized = true;
    this._refObject.current = refObject.current;
    this._duty_cycleIntialized = true;
    this._refObject.duty_cycle = refObject.duty_cycle;
    this._bridge_temperatureIntialized = true;
    this._refObject.bridge_temperature = refObject.bridge_temperature;
    this._motor_temperatureIntialized = true;
    this._refObject.motor_temperature = refObject.motor_temperature;
    this._measured_velocityIntialized = true;
    this._refObject.measured_velocity = refObject.measured_velocity;
    this._measured_travelIntialized = true;
    this._refObject.measured_travel = refObject.measured_travel;
    this._driver_faultIntialized = true;
    this._refObject.driver_fault = refObject.driver_fault;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    DriveFeedbackWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'jackal_msgs', subFolder: 'msg', interfaceName: 'DriveFeedback'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get current() {
    if (!this._currentIntialized) {
      return undefined;
    }
    return this._refObject.current;
  }
  set current(value) {
    this._currentIntialized = true;
    this._refObject.current = value;
  }
  get duty_cycle() {
    if (!this._duty_cycleIntialized) {
      return undefined;
    }
    return this._refObject.duty_cycle;
  }
  set duty_cycle(value) {
    this._duty_cycleIntialized = true;
    this._refObject.duty_cycle = value;
  }
  get bridge_temperature() {
    if (!this._bridge_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.bridge_temperature;
  }
  set bridge_temperature(value) {
    this._bridge_temperatureIntialized = true;
    this._refObject.bridge_temperature = value;
  }
  get motor_temperature() {
    if (!this._motor_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.motor_temperature;
  }
  set motor_temperature(value) {
    this._motor_temperatureIntialized = true;
    this._refObject.motor_temperature = value;
  }
  get measured_velocity() {
    if (!this._measured_velocityIntialized) {
      return undefined;
    }
    return this._refObject.measured_velocity;
  }
  set measured_velocity(value) {
    this._measured_velocityIntialized = true;
    this._refObject.measured_velocity = value;
  }
  get measured_travel() {
    if (!this._measured_travelIntialized) {
      return undefined;
    }
    return this._refObject.measured_travel;
  }
  set measured_travel(value) {
    this._measured_travelIntialized = true;
    this._refObject.measured_travel = value;
  }
  get driver_fault() {
    if (!this._driver_faultIntialized) {
      return undefined;
    }
    return this._refObject.driver_fault;
  }
  set driver_fault(value) {
    this._driver_faultIntialized = true;
    this._refObject.driver_fault = value;
  }
  copyRefObject(refObject) {
    this._refObject = new DriveFeedbackRefStruct(refObject.toObject());
    this._currentIntialized = true;
    this._duty_cycleIntialized = true;
    this._bridge_temperatureIntialized = true;
    this._motor_temperatureIntialized = true;
    this._measured_velocityIntialized = true;
    this._measured_travelIntialized = true;
    this._driver_faultIntialized = true;
  }
  copy(other) {
    this._refObject = new DriveFeedbackRefStruct(other._refObject.toObject());
    this._currentIntialized = true;
    this._duty_cycleIntialized = true;
    this._bridge_temperatureIntialized = true;
    this._motor_temperatureIntialized = true;
    this._measured_velocityIntialized = true;
    this._measured_travelIntialized = true;
    this._driver_faultIntialized = true;
  }
  static get classType() {
    return DriveFeedbackWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"duty_cycle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bridge_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"motor_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"measured_velocity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"measured_travel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"driver_fault","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"jackal_msgs","type":"DriveFeedback","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DriveFeedback"};
  }
  hasMember(name) {
    let memberNames = ["current","duty_cycle","bridge_temperature","motor_temperature","measured_velocity","measured_travel","driver_fault"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DriveFeedbackArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DriveFeedbackWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DriveFeedbackWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DriveFeedbackArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DriveFeedbackArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DriveFeedbackRefArray(size);
    this._refObject = new DriveFeedbackRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DriveFeedbackWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DriveFeedbackArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DriveFeedbackArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DriveFeedbackWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DriveFeedbackWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DriveFeedbackArrayWrapper;
  }
}
module.exports = DriveFeedbackWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "duty_cycle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bridge_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "motor_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "measured_velocity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "measured_travel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "driver_fault",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "jackal_msgs",
    "type": "DriveFeedback",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DriveFeedback"
}
*/
