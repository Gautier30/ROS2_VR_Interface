// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const PowerRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  shore_power_connected: primitiveTypes.int8,
  battery_connected: primitiveTypes.int8,
  power_12v_user_nominal: primitiveTypes.int8,
  charging_complete: primitiveTypes.int8,
  measured_voltages: Float32Wrapper.refObjectArrayType,
  measured_currents: Float32Wrapper.refObjectArrayType,
});
const PowerRefArray = ArrayType(PowerRefStruct);
const PowerRefStructArray = StructType({
  data: PowerRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PowerWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PowerRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._shore_power_connectedIntialized = true;
      this._battery_connectedIntialized = true;
      this._power_12v_user_nominalIntialized = true;
      this._charging_completeIntialized = true;
      this._wrapperFields.measured_voltages = Float32Wrapper.createArray();
      this._wrapperFields.measured_voltages.copy(other._wrapperFields.measured_voltages);
      this._wrapperFields.measured_currents = Float32Wrapper.createArray();
      this._wrapperFields.measured_currents.copy(other._wrapperFields.measured_currents);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PowerRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._shore_power_connectedIntialized = false;
    this._battery_connectedIntialized = false;
    this._power_12v_user_nominalIntialized = false;
    this._charging_completeIntialized = false;
    this._wrapperFields.measured_voltages = Float32Wrapper.createArray();
    this._wrapperFields.measured_currents = Float32Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new PowerWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PowerArrayWrapper;
  }
  static get ArrayType() {
    return PowerArrayWrapper;
  }
  static get refObjectArrayType() {
    return PowerRefStructArray
  }
  static get refObjectType() {
    return PowerRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._shore_power_connectedIntialized) {
        throw new TypeError('Invalid argument: shore_power_connected in Power');
      }
      if (!this._battery_connectedIntialized) {
        throw new TypeError('Invalid argument: battery_connected in Power');
      }
      if (!this._power_12v_user_nominalIntialized) {
        throw new TypeError('Invalid argument: power_12v_user_nominal in Power');
      }
      if (!this._charging_completeIntialized) {
        throw new TypeError('Invalid argument: charging_complete in Power');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.measured_voltages.freeze(own, checkConsistency);
    this._refObject.measured_voltages = this._wrapperFields.measured_voltages.refObject;
    if (own) {
      this._wrapperFields.measured_voltages.fill(Float32Array.from([]));
      this._wrapperFields.measured_voltages.freeze(own, checkConsistency);
      this._refObject.measured_voltages = this._wrapperFields.measured_voltages.refObject;
    }
    this._wrapperFields.measured_currents.freeze(own, checkConsistency);
    this._refObject.measured_currents = this._wrapperFields.measured_currents.refObject;
    if (own) {
      this._wrapperFields.measured_currents.fill(Float32Array.from([]));
      this._wrapperFields.measured_currents.freeze(own, checkConsistency);
      this._refObject.measured_currents = this._wrapperFields.measured_currents.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._shore_power_connectedIntialized = true;
    this._refObject.shore_power_connected = refObject.shore_power_connected;
    this._battery_connectedIntialized = true;
    this._refObject.battery_connected = refObject.battery_connected;
    this._power_12v_user_nominalIntialized = true;
    this._refObject.power_12v_user_nominal = refObject.power_12v_user_nominal;
    this._charging_completeIntialized = true;
    this._refObject.charging_complete = refObject.charging_complete;
    this._wrapperFields.measured_voltages.copyRefObject(refObject.measured_voltages);
    this._wrapperFields.measured_currents.copyRefObject(refObject.measured_currents);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    if (refObject.measured_voltages.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.measured_voltages);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.measured_voltages, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.measured_currents.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.measured_currents);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.measured_currents, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    PowerWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'jackal_msgs', subFolder: 'msg', interfaceName: 'Power'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get shore_power_connected() {
    if (!this._shore_power_connectedIntialized) {
      return undefined;
    }
    return this._refObject.shore_power_connected;
  }
  set shore_power_connected(value) {
    this._shore_power_connectedIntialized = true;
    this._refObject.shore_power_connected = value;
  }
  get battery_connected() {
    if (!this._battery_connectedIntialized) {
      return undefined;
    }
    return this._refObject.battery_connected;
  }
  set battery_connected(value) {
    this._battery_connectedIntialized = true;
    this._refObject.battery_connected = value;
  }
  get power_12v_user_nominal() {
    if (!this._power_12v_user_nominalIntialized) {
      return undefined;
    }
    return this._refObject.power_12v_user_nominal;
  }
  set power_12v_user_nominal(value) {
    this._power_12v_user_nominalIntialized = true;
    this._refObject.power_12v_user_nominal = value;
  }
  get charging_complete() {
    if (!this._charging_completeIntialized) {
      return undefined;
    }
    return this._refObject.charging_complete;
  }
  set charging_complete(value) {
    this._charging_completeIntialized = true;
    this._refObject.charging_complete = value;
  }
  get measured_voltages() {
    return this._wrapperFields['measured_voltages'].data;
  }
  set measured_voltages(value) {
    this._wrapperFields['measured_voltages'].fill(value);
  }
  get measured_currents() {
    return this._wrapperFields['measured_currents'].data;
  }
  set measured_currents(value) {
    this._wrapperFields['measured_currents'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new PowerRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._shore_power_connectedIntialized = true;
    this._battery_connectedIntialized = true;
    this._power_12v_user_nominalIntialized = true;
    this._charging_completeIntialized = true;
    this._wrapperFields.measured_voltages.copyRefObject(this._refObject.measured_voltages);
    this._wrapperFields.measured_currents.copyRefObject(this._refObject.measured_currents);
  }
  copy(other) {
    this._refObject = new PowerRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._shore_power_connectedIntialized = true;
    this._battery_connectedIntialized = true;
    this._power_12v_user_nominalIntialized = true;
    this._charging_completeIntialized = true;
    this._wrapperFields.measured_voltages.copy(other._wrapperFields.measured_voltages);
    this._wrapperFields.measured_currents.copy(other._wrapperFields.measured_currents);
  }
  static get classType() {
    return PowerWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int8","name":"NOT_APPLICABLE","value":-1},{"type":"uint8","name":"JACKAL_MEASURED_BATTERY","value":0},{"type":"uint8","name":"JACKAL_MEASURED_5V","value":1},{"type":"uint8","name":"JACKAL_MEASURED_12V","value":2},{"type":"uint8","name":"JACKAL_TOTAL_CURRENT","value":0},{"type":"uint8","name":"JACKAL_COMPUTER_CURRENT","value":1},{"type":"uint8","name":"JACKAL_DRIVE_CURRENT","value":2},{"type":"uint8","name":"JACKAL_USER_CURRENT","value":3}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"shore_power_connected","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"battery_connected","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"power_12v_user_nominal","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"charging_complete","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"measured_voltages","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"measured_currents","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"jackal_msgs","type":"Power","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Power"};
  }
  hasMember(name) {
    let memberNames = ["header","shore_power_connected","battery_connected","power_12v_user_nominal","charging_complete","measured_voltages","measured_currents"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PowerArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PowerWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PowerWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PowerArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PowerArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PowerRefArray(size);
    this._refObject = new PowerRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PowerWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PowerArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PowerArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PowerWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PowerWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PowerArrayWrapper;
  }
}
// Define constants (8 in total)
Object.defineProperty(PowerWrapper, "NOT_APPLICABLE", {value: -1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_MEASURED_BATTERY", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_MEASURED_5V", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_MEASURED_12V", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_TOTAL_CURRENT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_COMPUTER_CURRENT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_DRIVE_CURRENT", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PowerWrapper, "JACKAL_USER_CURRENT", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = PowerWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int8",
      "name": "NOT_APPLICABLE",
      "value": -1
    },
    {
      "type": "uint8",
      "name": "JACKAL_MEASURED_BATTERY",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "JACKAL_MEASURED_5V",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "JACKAL_MEASURED_12V",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "JACKAL_TOTAL_CURRENT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "JACKAL_COMPUTER_CURRENT",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "JACKAL_DRIVE_CURRENT",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "JACKAL_USER_CURRENT",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "shore_power_connected",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "battery_connected",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "power_12v_user_nominal",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "charging_complete",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "measured_voltages",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "measured_currents",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "jackal_msgs",
    "type": "Power",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Power"
}
*/
